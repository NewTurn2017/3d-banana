
import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

function fileToGenerativePart(base64: string, mimeType: string) {
    return {
        inlineData: {
            data: base64,
            mimeType,
        },
    };
}

const DETAILED_PROMPT = `
You are an expert 3D character artist specializing in multi-angle character generation. Your task is to generate a NEW IMAGE of the character from the provided source image, positioned and oriented EXACTLY as shown in the 3D human figure composition guide.

**Critical Instructions:**
1. **Source Character Analysis:** Extract the complete character appearance from the source image - clothing, hairstyle, facial features, accessories, body proportions, and colors.

2. **3D Position Guide:** The human figure shows the EXACT pose, angle, and orientation for the output. The character must:
   - Match the exact body position and pose of the 3D figure
   - Face the same direction as the 3D figure  
   - Have the same viewing angle (front, side, back, 3/4 view, etc.)
   - Maintain the same distance/scale as shown

3. **Image Generation Requirements:**
   - Generate a COMPLETE NEW IMAGE (not a modification)
   - Character must be 100% consistent with source appearance
   - Pose and angle must EXACTLY match the 3D guide
   - Background should be contextually appropriate but can vary
   - Lighting should be natural for the new angle
   - High quality, photorealistic output

4. **Consistency Checklist:**
   - ✓ Same exact clothing and colors
   - ✓ Same hairstyle and color
   - ✓ Same facial features and expression style
   - ✓ Same body proportions
   - ✓ Same accessories if any

**Output:** Generate a single, high-quality image with the character in the exact pose and angle shown in the 3D guide. The character appearance must be identical to the source, only the pose/angle changes.
`;


async function generateSingleImage(characterImageBase64: string, characterImageType: string, compositionImageBase64: string): Promise<string> {
    const characterPart = fileToGenerativePart(characterImageBase64, characterImageType);
    const compositionPart = fileToGenerativePart(compositionImageBase64.split(',')[1], 'image/png');
    
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image-preview',
        contents: {
            parts: [
                { text: DETAILED_PROMPT },
                characterPart,
                compositionPart,
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
            return part.inlineData.data;
        }
    }
    
    throw new Error("No image was generated by the API.");
}

export async function generateImagesFromCompositions(
    characterImageBase64: string,
    characterImageType: string,
    compositionImages: string[]
): Promise<string[]> {
    const characterImgData = characterImageBase64.split(',')[1];
    const generationPromises = compositionImages.map(compImg => 
        generateSingleImage(characterImgData, characterImageType, compImg)
    );

    const results = await Promise.all(generationPromises);
    return results;
}
